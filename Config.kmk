## @file
# Global Project Configuration File
#

#------------------------------------------------------------------------------
# Header
#------------------------------------------------------------------------------

#
# Include site-specific configuration for local definitions.
#
ifndef LOCAL_CONFIG
 LOCAL_CONFIG = $(wildcard $(PATH_ROOT)/LocalConfig.kmk)
endif
LOCAL_CONFIG_PRE = 1
include $(LOCAL_CONFIG)
LOCAL_CONFIG_PRE =

include $(PATH_ROOT)/config/helpers.kmk

#------------------------------------------------------------------------------
# Global definitions
#------------------------------------------------------------------------------

ifeq ($(KBUILD_TARGET),os2)
XP_OS2                 ?= 1
MOZ_WIDGET_TOOLKIT     ?= os2
DLL_PREFIX             ?=
endif

MOZ_BUILD_APP          ?= browser
MOZ_DISTRIBUTION_ID    ?= org.mozilla
MOZ_USER_DIR           ?= Mozilla

MOZ_UPDATE_CHANNEL     ?= default

MOZ_NATIVE_FFI                     ?=
MOZ_NATIVE_SQLITE                  ?=

MOZ_XUL                            ?= 1
MOZ_OMNIJAR                        ?= 1
MOZ_CRASHREPORTER                  ?=
MOZ_INSTRUMENT_EVENT_LOOP          ?=
MOZ_ZIPWRITER                      ?= 1

MOZ_RAW                            ?=
MOZ_OGG                            ?= 1
MOZ_OPUS                           ?= 1
MOZ_WAVE                           ?= 1
MOZ_WEBM                           ?= 1
MOZ_GSTREAMER                      ?=
MOZ_WEBRTC                         ?=

MOZ_GRAPHITE                       ?= 1

OMNIJAR_NAME                       ?= omni.ja

TARGET_XPCOM_ABI                   ?= x86-gcc4

NS_PRINTING ?= 1

NECKO_PROTOCOLS ?= about data file ftp http res viewsource websocket wyciwyg device
NECKO_COOKIES   ?= 1
NECKO_WIFI      ?=

MOZ_ENABLE_LIBCONIC  ?=
MOZ_ENABLE_QTNETWORK ?=

MOZ_DEBUG_ENABLE_DEFS  := DEBUG _DEBUG TRACING
MOZ_DEBUG_DISABLE_DEFS := NDEBUG TRIMMED

NSS_ENABLE_ECC                     ?= 1

JS_NATIVE_EDITLINE                 ?= 1
JS_DISABLE_SHELL                   ?=
JS_HAS_CTYPES                      ?= 1
JS_ENABLE_METHODJIT                ?= 1
JS_ENABLE_METHODJIT_SPEW           ?=
JS_ENABLE_METHODJIT_TYPED_ARRAY    ?= 1
JS_ENABLE_MONOIC                   ?= 1
JS_ENABLE_POLYIC                   ?= 1
JS_THREADSAFE                      ?= 1
JS_HAVE_ENDIAN_H                   ?= 1
JS_HAVE_MACHINE_ENDIAN_H           ?= 1
JS_BYTES_PER_WORD                  ?= 4
JS_HAS_XML_SUPPORT                 ?= 1

ifneq (,$(filter arm% sparc %86 x86_64 mips%,$(KBUILD_TARGET_CPU)))
JS_ENABLE_YARR_JIT                 ?= 1
endif

#
# All further variables are normally not altered
#

PYTHON ?= python
PERL   ?= perl
AWK    ?= awk
GREP   ?= grep

ifeq ($(KBUILD_TYPE),debug)
MOZ_DEBUG := 1
else
MOZ_DEBUG :=
endif

DLL_SUFFIX ?= $(SUFF_DLL)

MOZ_MACBUNDLE_ID = \
    $(MOZ_DISTRIBUTION_ID).$(tolower $(MOZ_APP_DISPLAYNAME))$(filter-out release,$(KBUILD_TYPE))

PYTHON_PATH = $(PYTHON) $(PATH_ROOT)/config/pythonpath.py

ifndef MOZ_SYSTEM_PLY
PLY_INCLUDE = -I$(PATH_ROOT)/other-licenses/ply
PLY_PROGS = \
    $(PATH_ROOT)/other-licenses/ply/ply/lex.py \
    $(PATH_ROOT)/other-licenses/ply/ply/yacc.py
endif

# Variables read from the environment (normally after config scripts)
SHELL_CONFIG_VARS = \
	MOZILLA_VERSION MOZILLA_UAVERSION FIREFOX_VERSION \
	MOZ_APP_BASENAME MOZ_APP_VENDOR \
	MOZ_UPDATER MOZ_PHOENIX MOZ_CHROME_FILE_FORMAT \
	MOZ_SAFE_BROWSING MOZ_SERVICES_AITC MOZ_SERVICES_NOTIFICATIONS MOZ_SERVICES_SYNC \
	MOZ_APP_VERSION MOZ_BRANDING_DIRECTORY MOZ_OFFICIAL_BRANDING_DIRECTORY MOZ_APP_ID \
	ACCEPTED_MAR_CHANNEL_IDS MAR_CHANNEL_ID MOZ_PROFILE_MIGRATOR \
	MOZ_EXTENSION_MANAGER MOZ_APP_STATIC_INI MOZ_WEBAPP_RUNTIME MOZ_MEDIA_NAVIGATOR \
	MOZ_APP_DISPLAYNAME MOZ_UA_BUILDID \
	NSPR_MAJOR_VERSION NSPR_MINOR_VERSION NSPR_PATCH_VERSION

# Variables passed to the compilers as defines (for C/C++ -- via mozilla-config.h)
CONFIG_VARS = \
    FIREFOX_VERSION MOZ_UPDATER MOZ_PHOENIX \
    MOZ_SAFE_BROWSING MOZ_SERVICES_AITC MOZ_SERVICES_NOTIFICATIONS \
    MOZ_SERVICES_SYNC MOZ_MEDIA_NAVIGATOR \
    MOZ_BUILD_APP MOZ_MACBUNDLE_ID MOZ_UPDATE_CHANNEL \
    MOZ_XUL MOZ_OMNIJAR MOZ_RAW MOZ_OGG MOZ_OPUS MOZ_WAVE MOZ_WEBM \
    MOZ_GSTREAMER MOZ_WEBRTC MOZ_GRAPHITE \
    XP_LINUX XP_WIN XP_OS2 XP_MACOSX NS_ENABLE_TSF ANDROID SOLARIS \
    MOZ_E10S_COMPAT \
    MOZILLA_VERSION_U=$(MOZILLA_VERSION)

# Variables passed to the compilers as defines, quoted
CONFIG_VARS_QUOTED = \
    MOZ_DLL_PREFIX=$(DLL_PREFIX) MOZ_DLL_SUFFIX=$(DLL_SUFFIX) \
    MOZILLA_VERSION MOZILLA_UAVERSION \
    MOZ_APP_UA_NAME MOZ_APP_UA_VERSION=$(MOZ_APP_VERSION) \
    MOZ_DISTRIBUTION_ID MOZ_UA_BUILDID MOZ_USER_DIR

FILE_SUB_FOOTER     = $(PATH_ROOT)/config/footer.kmk
CACHED_CONFIG       = $(PATH_OBJ)/CachedConfig.kmk

MOZILLA_CONFIG_H    = $(PATH_OBJ)/mozilla-config.h
XPCOM_CONFIG_H 	    = $(PATH_OBJ)/xpcom/xpcom-config.h
XPCOM_PRIVATE_H     = $(PATH_OBJ)/xpcom/xpcom-private.h
JS_CONFDEFS_H       = $(PATH_OBJ)/js/js-confdefs.h

BUILDID             = $(PATH_OBJ)/buildid

# Suffix for long long integer constants in C
if1of ($(KBUILD_TARGET), win)
LONGLONG_SUFF = i64
else
LONGLONG_SUFF = LL
endif

#
# Unit settings.
#

KBUILD_UNIT_PATHS += $(PATH_ROOT)/config

# Global use of the config-files unit requires this:
ALL_TARGETS += $(CONFIG_FILES)

# Global use of the tasks unit requires this:
ALL_TARGETS += $(TASKS)

#
# Include cached build settings.
#
ifn1of (configure, $(MAKECMDGOALS))
 -include $(CACHED_CONFIG)
 ifeq ($(CACHED_CONFIG_INCLUDED),)
  $(error Please run 'kmk configure' to prepare build settings)
 else # ifeq ($(CACHED_CONFIG_INCLUDED),)
#
# Cached build settings sanity checks.
#
 ifeq ($(FIREFOX_VERSION),)
  $(error FIREFOX_VERSION is unexpectedly blank)
 endif
 endif # ifeq ($(CACHED_CONFIG_INCLUDED),)
endif # ifn1of (configure, $(MAKECMDGOALS))

#------------------------------------------------------------------------------
# Tools
#------------------------------------------------------------------------------

#------------------------------------------------------------------------------
# Common libraries referenced by components
#------------------------------------------------------------------------------

NSPR_INCS   = $(PATH_STAGE)/include/nspr
NSPR_LIBS   = $(PATH_STAGE_LIB)/nspr$(NSPR_MAJOR_VERSION)$(SUFF_LIB) \
              $(PATH_STAGE_LIB)/plc$(NSPR_MAJOR_VERSION)$(SUFF_LIB) \
              $(PATH_STAGE_LIB)/plds$(NSPR_MAJOR_VERSION)$(SUFF_LIB)
ZLIB_LIBS   = $(PATH_STAGE_LIB)/mozz$(SUFF_LIB)

MFBT_LIBS   = $(PATH_STAGE_LIB)/mfbt$(SUFF_LIB)

MOZGLUE_LIBS = $(PATH_STAGE_LIB)/mozglue$(SUFF_LIB)

NSS_INCS    = $(PATH_STAGE)/public/nss

ifndef MOZ_NATIVE_SQLITE
SQLITE_DEFS = $(if $(SQLITE_UNSAFE_THREADS),SQLITE_UNSAFE_THREADS)
SQLITE_INCS =
SQLITE_LIBS = $(PATH_STAGE_LIB)/mozsqlt3$(SUFF_LIB)
endif

#------------------------------------------------------------------------------
# Templates
#------------------------------------------------------------------------------

TEMPLATE_CxxBase            = Base template for C/C++ sources
TEMPLATE_CxxBase_TOOL.os2   = GXX3OMF
TEMPLATE_CxxBase_INCS       = $(PATH_STAGE)/include

TEMPLATE_CxxBase_CFLAGS = \
    -pedantic -Wall -Wpointer-arith -Wdeclaration-after-statement \
    -Werror=return-type -Wtype-limits -Wempty-body \
    -Wno-unused -Wno-overlength-strings -Wcast-align \
    -Wno-long-long -fno-strict-aliasing \
    -std=gnu9x

TEMPLATE_CxxBase_CXXFLAGS = \
    -pedantic -Wall -Wpointer-arith -Woverloaded-virtual \
    -Werror=return-type -Wtype-limits -Wempty-body \
    -Wno-ctor-dtor-privacy -Wno-overlength-strings \
    -Wno-invalid-offsetof -Wno-variadic-macros -Wcast-align \
    -Wno-long-long -fno-exceptions -fno-strict-aliasing -fno-rtti \
    -std=gnu++0x

TEMPLATE_CxxBase_DEFS       = MOZILLA_CLIENT

TEMPLATE_CxxBase_CFLAGS.release     = -O2 -fomit-frame-pointer
TEMPLATE_CxxBase_CXXFLAGS.release   = -O2 -fomit-frame-pointer
TEMPLATE_CxxBase_DEFS.release       = $(MOZ_DEBUG_DISABLE_DEFS)
TEMPLATE_CxxBase_LDFLAGS.release    =

TEMPLATE_CxxBase_CFLAGS.debug       = -fno-omit-frame-pointer
TEMPLATE_CxxBase_CXXFLAGS.debug     = -fno-omit-frame-pointer
TEMPLATE_CxxBase_DEFS.debug         = $(MOZ_DEBUG_ENABLE_DEFS)
TEMPLATE_CxxBase_LDFLAGS.debug      = -fno-inline

# generate .sym files but don't put them in a separate dir
TEMPLATE_CxxBase_LD_DEBUG.os2       = split
TEMPLATE_CxxBase_DEBUG_STAGE.os2    = nul

TEMPLATE_CxxBase_ORDERDEPS  = \
    $(TYPELIB_HEADERS_ALL_TARGETS) \
    $(EXPORT_HEADERS_ALL_TARGETS)

#

TEMPLATE_Cxx            = Generic Mozilla C/C++ sources
TEMPLATE_Cxx_EXTENDS    = CxxBase
TEMPLATE_Cxx_CFLAGS     = -include $(MOZILLA_CONFIG_H) $(TEMPLATE_CxxBase_CFLAGS)
TEMPLATE_Cxx_CXXFLAGS   = -include $(MOZILLA_CONFIG_H) $(TEMPLATE_CxxBase_CXXFLAGS)

TEMPLATE_Cxx_ORDERDEPS  = \
    $(MOZILLA_CONFIG_H) $(XPCOM_CONFIG_H) $(XPCOM_PRIVATE_H)

TEMPLATE_Lib                = Generic Mozilla library
TEMPLATE_Lib_EXTENDS        = Cxx

TEMPLATE_Bin                = Generic Mozilla DLL or EXE
TEMPLATE_Bin_EXTENDS        = Cxx

TEMPLATE_Bin_LDFLAGS.os2    = -Zmap -Zlinker /ST:0x100000 -Zhigh-mem

if1of ($(EMXOMFLD_TYPE),WLINK wlink)
TEMPLATE_Bin_LDFLAGS.os2   += -Zlinker '"DISABLE 1121"'
endif

TEMPLATE_Dll                = Generic Mozilla DLL
TEMPLATE_Dll_EXTENDS        = Bin
TEMPLATE_Dll_LIBS           = $(MOZGLUE_LIBS)

TEMPLATE_Exe                = Generic Mozilla EXE
TEMPLATE_Exe_EXTENDS        = Bin

#

TEMPLATE_JsCxx          = JavaScript C/C++ sources
TEMPLATE_JsCxx_EXTENDS  = CxxBase
TEMPLATE_JsCxx_CFLAGS   = -include $(JS_CONFDEFS_H) $(TEMPLATE_CxxBase_CFLAGS)
TEMPLATE_JsCxx_CXXFLAGS = -include $(JS_CONFDEFS_H) $(TEMPLATE_CxxBase_CXXFLAGS)

TEMPLATE_JsCxx_DEPS     = $(JS_CONFDEFS_H)

TEMPLATE_JsBin              = JavaScript DLL or EXE
TEMPLATE_JsBin_EXTENDS      = JsCxx

$(call COPY_PROPS,TEMPLATE_Bin,LDFLAGS,TEMPLATE_JsBin)

TEMPLATE_JsDll              = JavaScript DLL
TEMPLATE_JsDll_EXTENDS      = JsBin

$(call COPY_PROPS,TEMPLATE_Dll,LIBS,TEMPLATE_JsDll)

TEMPLATE_JsExe              = JavaScript EXE
TEMPLATE_JsExe_EXTENDS      = JsBin

#

TEMPLATE_LibXpCom            = XPCOM library
TEMPLATE_LibXpCom_EXTENDS    = Lib
TEMPLATE_LibXpCom_EXTENDS_BY = appending
TEMPLATE_LibXpCom_DEFS       = \
	MOZILLA_INTERNAL_API \
	_IMPL_NS_COM
TEMPLATE_LibXpCom_INCS       = \
    $(dir $(XPCOM_PRIVATE_H)) \
    $(PATH_ROOT)/xpcom/base \
    $(PATH_ROOT)/xpcom/build \
    $(PATH_ROOT)/xpcom/ds \
    $(PATH_ROOT)/xpcom/io \
    $(PATH_ROOT)/xpcom/threads \
    $(PATH_ROOT)/xpcom/components \
    $(PATH_ROOT)/xpcom/reflect/xptcall/public \
    $(PATH_ROOT)/xpcom/reflect/xptinfo/public \
    $(PATH_ROOT)/xpcom/typelib/xpt/public \
    $(PATH_ROOT)/xpcom/glue \
    $(PATH_ROOT)/intl/unicharutil/util \
    $(PATH_ROOT)/tools/profiler \
    $(NSPR_INCS)

#

TEMPLATE_LibXul            = XUL library
TEMPLATE_LibXul_EXTENDS    = LibXpCom
TEMPLATE_LibXul_EXTENDS_BY = appending
TEMPLATE_LibXul_DEFS       = \
	EXPORT_XPT_API \
	EXPORT_XPTC_API \
	_IMPL_NS_GFX \
	_IMPL_NS_WIDGET \
	IMPL_XREAPI \
	IMPL_NS_NET \
	IMPL_THEBES

#

TEMPLATE_LibChromium            = Chromium library
TEMPLATE_LibChromium_EXTENDS    = Lib
TEMPLATE_LibChromium_EXTENDS_BY = appending
TEMPLATE_LibChromium_DEFS       = \
    EXCLUDE_SKIA_DEPENDENCIES
TEMPLATE_LibChromium_INCS       = \
    $(PATH_ROOT)/ipc/chromium/src \
    $(PATH_ROOT)/ipc/glue \
    $(PATH_OBJ)/ipdl/ipdlheaders

# cause ipdl headers to be generated when building from root
TEMPLATE_LibChromium_ORDERDEPS = $(ipdl_1_TARGET)

# includes needed by ipdl headers
TEMPLATE_LibChromium_INCS += \
    $(PATH_ROOT)/gfx/thebes \
    $(PATH_ROOT)/gfx/src \
    $(PATH_ROOT)/gfx/layers/basic \
    $(PATH_ROOT)/gfx/layers/ipc \
    $(PATH_ROOT)/gfx/layers/opengl \
    $(PATH_ROOT)/gfx/layers \
    $(PATH_ROOT)/layout/style

TEMPLATE_LibChromium_DEFS.darwin = \
    OS_MACOSX=1 \
    OS_POSIX=1

TEMPLATE_LibChromium_DEFS.win = \
    UNICODE \
    _UNICODE \
    NOMINMAX \
    _CRT_RAND_S \
    CERT_CHAIN_PARA_HAS_EXTRA_FIELDS \
    _SECURE_ATL \
    CHROMIUM_BUILD \
    U_STATIC_IMPLEMENTATION \
    OS_WIN=1 \
    WIN32 \
    _WIN32 \
    _WINDOWS \
    WIN32_LEAN_AND_MEAN \
    COMPILER_MSVC
TEMPLATE_LibChromium_LIBS.win = \
    psapi shell32 dbghelp

TEMPLATE_LibChromium_DEFS.os2 = \
    OS_POSIX=1 \
    OS_OS2=1 \

TEMPLATE_LibChromium_DEFS.linux = \
    OS_LINUX=1 \
    OS_POSIX=1

#

TEMPLATE_LibXulChromium            = XUL + Chromium library
TEMPLATE_LibXulChromium_EXTENDS    = LibXul
TEMPLATE_LibXulChromium_EXTENDS_BY = appending

$(call COPY_PROPS,TEMPLATE_LibChromium,DEFS INCS DEPS ORDERDEPS,TEMPLATE_LibXulChromium)

#

TEMPLATE_LibComponent            = XUL library
TEMPLATE_LibComponent_EXTENDS    = LibXulChromium
TEMPLATE_LibComponent_EXTENDS_BY = appending
TEMPLATE_LibComponent_DEFS       = \
	DXPCOM_TRANSLATE_NSGM_ENTRY_POINT=1
TEMPLATE_LibComponent_INST       = $(STAGE_LIB)components/

#

TEMPLATE_NssLib             = NSS library
TEMPLATE_NssLib_EXTENDS     = CxxBase
TEMPLATE_NssLib_EXTENDS_BY  = appending
TEMPLATE_NssLib_INCS        = \
	$(NSPR_INCS) \
	$(PATH_STAGE)/public/nss \
	$(PATH_STAGE)/private/nss
TEMPLATE_NssLib_DEFS        = \
	$(if $(NSS_ENABLE_ECC),NSS_ENABLE_ECC) \
	USE_UTIL_DIRECTLY

TEMPLATE_NssLib_DEFS.os2    = \
    XP_PC=1 \
    XP_OS2=1

#

TEMPLATE_NssBin             = NSS Binary
TEMPLATE_NssBin_EXTENDS     = NssLib
TEMPLATE_NssBin_EXTENDS_BY  = appending
TEMPLATE_NssBin_LIBS        = $(NSPR_LIBS)

#

TEMPLATE_NssDll             = NSS DLL
TEMPLATE_NssDll_EXTENDS     = NssBin
TEMPLATE_NssDll_EXTENDS_BY  = appending
TEMPLATE_NssDll_USES        = exports-file

#

TEMPLATE_NssExe             = NSS Executable
TEMPLATE_NssExe_EXTENDS     = NssBin
TEMPLATE_NssExe_EXTENDS_BY  = appending

#

netwerk_s_base_TEMPLATE = LibXul
netwerk_s_base_DEFS		= IMPL_NS_NET
netwerk_s_base_INCS		= $(PATH_ROOT)/netwerk/base/src

#
# INSTALLS base targets
#

components_install_INST = bin/components/
components_install_POST_XFILE_CMDS = \
	$$(if $$(filter %.manifest,$$<), $(QUIET) \
		$(PYTHON) $(PATH_ROOT)/config/buildlist.py $$(dir $$@)../chrome.manifest "manifest components/$$(notdir $$(basename $$<)).manifest")

modules_install_INST = bin/modules/

#
# TASKS base target for generating .xpt/.h from .idl
#

PROPS_TASKS_SINGLE += IDL_INST HEADER_INST

typelib_XPT_INST = bin/components/
typelib_IDL_INST = idl/
typelib_HEADER_INST = include/

typelib_DEFAULT_INCS = \
	$(PATH_ROOT)/xpcom/base \
	$(PATH_ROOT)/xpcom/io \
	$(PATH_ROOT)/xpcom/ds \
	$(PATH_ROOT)/xpcom/threads \
	$(PATH_ROOT)/xpcom/components \
	$(PATH_ROOT)/netwerk/base/public

typelib_SOURCE_DEPS = \
	$(PATH_STAGE)/sdk/bin/header.py \
	$(PATH_STAGE)/sdk/bin/typelib.py \
	$(PATH_STAGE)/sdk/bin/xpidl.py \
	$(PATH_STAGE)/sdk/bin/xpidllex.py \
	$(PATH_STAGE)/sdk/bin/xpidlyacc.py \
	$(XPT_BINARIES)

typelib_SOURCE_TARGET = $(notdir $(basename $(src))).h
typelib_SOURCE_OUTPUT = $(notdir $(basename $(src))).xpt
typelib_SOURCE_INTERMEDIATE = $(out).tmp

define typelib_SOURCE_COMMANDS
	$(QUIET)cd $(outdir) && $(PYTHON_PATH) \
		$(PLY_INCLUDE) \
		$(PATH_STAGE)/sdk/bin/header.py -I$(defpath) \
		$(addprefix -I,$(typelib_DEFAULT_INCS) $(incs)) $(flags) \
		$(src) -d $(dep) -o $(out)
	$(QUIET)cd $(outdir) && $(PYTHON_PATH) \
		$(PLY_INCLUDE) -I$(PATH_ROOT)/xpcom/typelib/xpt/tools \
		$(PATH_STAGE)/sdk/bin/typelib.py -I$(defpath) \
		$(addprefix -I,$(typelib_DEFAULT_INCS) $(incs)) $(flags) \
		$(src) -d $(out).tmp -o $(output)
	$(QUIET)$(CAT_EXT) $(out).tmp >> $(dep)
	$(QUIET)$(RM) -f $(out).tmp
endef

typelib_TARGET = $(outbase).xpt

define typelib_COMMANDS
	$(QUIET)cd $(outdir) && $(PYTHON) $(PATH_STAGE)/sdk/bin/xpt.py link \
		$(out) $(src_output)
endef

typelib_POST_HOOK = typelib_POST_HOOK_func
define typelib_POST_HOOK_func

# Install the module .xpt
local xpt_inst := $(call TARGET_PROP_FIRST,XPT_INST)
ifneq ($(xpt_inst),)
 $(target)_XPT_INST_INST    := $(xpt_inst)
 $(target)_XPT_INST_SOURCES := $($(target)_1_TARGET)
 $(target)_XPT_INST_POST_XFILE_CMDS := $(QUIET) \
  $(PYTHON) $(PATH_ROOT)/config/buildlist.py $$(dir $$@)interfaces.manifest "interfaces $(name).xpt" && \
  $(PYTHON) $(PATH_ROOT)/config/buildlist.py $$(dir $$@)../chrome.manifest "manifest components/interfaces.manifest"
 $(eval _ALL_INSTALLS += $(target)_XPT_INST)
endif

# Install the .idl
local idl_inst := $(call TARGET_PROP_FIRST,IDL_INST)
ifneq ($(idl_inst),)
 $(target)_IDL_INST_INST    := $(idl_inst)
 $(target)_IDL_INST_SOURCES := $(abspathex $($(target)_SOURCES),$(defpath))
 $(eval _ALL_INSTALLS += $(target)_IDL_INST)
endif

# Install the .h
local hdr_inst := $(call TARGET_PROP_FIRST,HEADER_INST)
ifneq ($(hdr_inst),)
 $(target)_HEADER_INST_INST    := $(hdr_inst)
 $(target)_HEADER_INST_SOURCES := $($(target)_1_SOURCE_TARGET)
 $(eval _ALL_INSTALLS += $(target)_HEADER_INST)
endif

# memorize the targets
$(eval TYPELIB_HEADERS_ALL_TARGETS += $$($(target)_HEADER_INST_1_TARGET))

endef # typelib_POST_HOOK_func

#------------------------------------------------------------------------------
# Miscellaneous
#------------------------------------------------------------------------------

#
# kBuild bug fix: file hook properties are named as PRE_FILE_CMDS and POST_FILE_CMDS when
# inheriting but PRE_XFILE_CMDS and POST_XFILE_CMDS when actually using them.
#
PROPS_INSTALLS_DEFERRED := $(PROPS_INSTALLS_DEFERRED) PRE_XFILE_CMDS POST_XFILE_CMDS

#------------------------------------------------------------------------------
# Footer
#------------------------------------------------------------------------------

#
# Include site-specific configuration for local overrides.
#
include $(LOCAL_CONFIG)

# Configurable variables turned into defines (DEF=VAL, w/o the -D prefix)
CONFIG_DEFS = \
    $(strip \
        $(foreach v,$(CONFIG_VARS), \
            $(foreach vl,$(firstword $(subst =, ,$(v))), \
                $(foreach vr,$(firstword $(word 2,$(subst =, ,$(v))) $($(v))), \
                    $(vl)=$(vr))))) \
    $(foreach v,$(CONFIG_VARS_QUOTED), \
        $(foreach vl,$(firstword $(subst =, ,$(v))), \
            $(foreach vr,\"$(subst $$(SP),\$$(SP),$(firstword $(word 2,$(subst =, ,$(v))) $($(v))))\", \
                $(vl)=$(vr))))

# Add debug/nodebug defs
ifdef MOZ_DEBUG
CONFIG_DEFS += $(MOZ_DEBUG_ENABLE_DEFS)
else
CONFIG_DEFS += $(MOZ_DEBUG_DISABLE_DEFS)
endif

# This is as CONFIG_DEFS but with -D
$(eval CONFIG_DEFS_D := $(addprefix -D,$(CONFIG_DEFS)))

# Expand CONFIG_DEFS once and for all (also to cause $$(SP) expansion to spaces)
$(eval CONFIG_DEFS := $(CONFIG_DEFS))
