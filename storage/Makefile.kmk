## @file
# Module makefile
#

SUB_DEPTH = ..
include $(KBUILD_PATH)/subheader.kmk

ifndef MOZ_NATIVE_SQLITE
INCLUDE_SUBDIRS = ../db/sqlite3/src
endif

USES += tasks

TASKS += storage

storage_EXTENDS = typelib
storage_DEFPATH := $(PATH_SUB_CURRENT)/public

# NOTE When adding something to this list, you probably need to add it to the
#      storage.h file too.
storage_SOURCES = \
    mozIStorageService.idl \
    mozIStorageConnection.idl \
    mozIStorageAggregateFunction.idl \
    mozIStorageFunction.idl \
    mozIStorageProgressHandler.idl \
    mozIStorageStatement.idl \
    mozIStorageValueArray.idl \
    mozIStorageResultSet.idl \
    mozIStorageRow.idl \
    mozIStorageError.idl \
    mozIStorageStatementParams.idl \
    mozIStorageStatementRow.idl \
    mozIStorageStatementCallback.idl \
    mozIStoragePendingStatement.idl \
    mozIStorageBindingParamsArray.idl \
    mozIStorageBindingParams.idl \
    mozIStorageCompletionCallback.idl \
    mozIStorageBaseStatement.idl \
    mozIStorageAsyncStatement.idl \
    mozIStorageServiceQuotaManagement.idl \
    mozIStorageVacuumParticipant.idl

INSTALLS += storage_exports

storage_exports_INST = include/
storage_exports_SOURCES = \
    public/mozStorageHelper.h \
    build/mozStorageCID.h

INSTALLS += storage_exports_mozilla

storage_exports_mozilla_INST = include/mozilla/
storage_exports_mozilla_SOURCES = \
    public/storage.h

INSTALLS += storage_exports_mozilla_storage

storage_exports_mozilla_storage_INST = include/mozilla/storage/

# NOTE When adding something to this list, you probably need to add it to the
#      storage.h file too.
storage_exports_mozilla_storage_SOURCES = \
    public/StatementCache.h \
    src/Variant.h \
    src/Variant_inl.h

LIBRARIES += storage_s

storage_s_TEMPLATE = LibXul
storage_s_DEFPATH := $(PATH_SUB_CURRENT)/src
storage_s_INCS     = \
    $(PATH_ROOT)/db/sqlite3/src \
    $(PATH_ROOT)/dom/base
storage_s_SOURCES  = \
    mozStorageService.cpp \
    mozStorageConnection.cpp \
    mozStorageStatement.cpp \
    mozStorageStatementParams.cpp \
    mozStorageStatementRow.cpp \
    mozStorageArgValueArray.cpp \
    mozStorageSQLFunctions.cpp \
    mozStorageRow.cpp \
    mozStorageResultSet.cpp \
    mozStorageError.cpp \
    mozStorageAsyncStatementExecution.cpp \
    mozStorageStatementJSHelper.cpp \
    mozStoragePrivateHelpers.cpp \
    mozStorageBindingParamsArray.cpp \
    mozStorageBindingParams.cpp \
    mozStorageAsyncStatement.cpp \
    mozStorageAsyncStatementJSHelper.cpp \
    mozStorageAsyncStatementParams.cpp \
    StorageBaseStatementInternal.cpp \
    SQLCollations.cpp \
    VacuumManager.cpp \
    TelemetryVFS.cpp \
    FileSystemModule.cpp

# TODO: we do this in crashreporter and storage/src too, should be centralized
storage_s_DEFS.linux += XP_LINUX

# Don't use the jemalloc allocator on Android, because we can't guarantee
# that Gecko will configure sqlite before it is first used (bug 730495).
#
# Note: On Windows our sqlite build assumes we use jemalloc.  If you disable
# MOZ_STORAGE_MEMORY on Windows, you will also need to change the "ifdef
# MOZ_MEMORY" options in db/sqlite3/src/Makefile.in.
ifdef MOZ_MEMORY
ifneq ($(KBUILD_TARGET),android)
storage_s_DEFS += MOZ_STORAGE_MEMORY
endif
endif

# This is the default value.  If we ever change it when compiling sqlite, we
# will need to change it here as well.
storage_s_DEFS += SQLITE_MAX_LIKE_PATTERN_LENGTH=50000

LIBRARIES += storagecomps

storagecomps_TEMPLATE = LibComponent
storagecomps_DEFPATH := $(PATH_SUB_CURRENT)/build
storagecomps_INCS     = \
    ../src
storagecomps_SOURCES  = \
    mozStorageModule.cpp

include $(FILE_SUB_FOOTER)
