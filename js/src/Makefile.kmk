## @file
# Module makefile
#

SUB_DEPTH = ../..
include $(KBUILD_PATH)/subheader.kmk

ifdef JS_NATIVE_EDITLINE
# @todo: later
#INCLUDE_SUBDIRS += editline
endif

ifndef JS_DISABLE_SHELL
# @todo: later
#INCLUDE_SUBDIRS += shell
endif

ifdef JS_HAS_CTYPES
INCLUDE_SUBDIRS += ctypes/libffi
endif

#
# installable headers
#
INSTALLS += js_exports

js_exports_INST     = include/
js_exports_SOURCES += \
	$(js_config_h_1_TARGET) \
	jscpucfg.h \
	js.msg \
	jsalloc.h \
	jsapi.h \
	jsatom.h \
	jsatom.tbl \
	jsclass.h \
	jsclist.h \
	jsdbgapi.h \
	jsdhash.h \
	jsfriendapi.h \
	jsgc.h \
	jslock.h \
	json.h \
	jsproxy.h \
	jsprf.h \
	jsproto.tbl \
	jsprvtd.h \
	jspubtd.h \
	jstypes.h \
	jsutil.h \
	jsversion.h \
	jswrapper.h \
	jsval.h \
	perf/jsperf.h

INSTALLS += js_exports_ds

js_exports_ds_INST     = include/ds/
js_exports_ds_SOURCES += \
	$(addprefix ds/, \
		BitArray.h \
	)

INSTALLS += js_exports_gc

js_exports_gc_INST     = include/gc/
js_exports_gc_SOURCES += \
	$(addprefix gc/, \
		Barrier.h \
		Heap.h \
		Root.h \
		Statistics.h \
		StoreBuffer.h \
	)

INSTALLS += js_exports_js

js_exports_js_INST     = include/js/
js_exports_js_SOURCES += \
	$(addprefix ../public/, \
		HashTable.h \
		LegacyIntTypes.h \
		MemoryMetrics.h \
		TemplateLib.h \
		Utility.h \
		Vector.h \
	)

#
# host_jskwgen executable
#
BLDPROGS += host_jskwgen

host_jskwgen_TEMPLATE   = JsExe
host_jskwgen_SOURCES    = jskwgen.cpp

#
# host_jsoplengen executable
#
BLDPROGS += host_jsoplengen

host_jsoplengen_TEMPLATE    = JsExe
host_jsoplengen_SOURCES     = jsoplengen.cpp

#
# js dll
#
DLLS += js

js_NAME     = mozjs
js_TEMPLATE = JsDll

# config headers

js_USES += config-files

js_CONFIG_FILES += js_config_h js_confdefs_h

js_config_h_MODE   = cdefs
js_config_h_SOURCE = js-config.h.in
js_config_h_TARGET = js-config.h
js_config_h_VARS   = \
    JS_THREADSAFE JS_HAS_CTYPES JS_GC_ZEAL JS_HAVE_ENDIAN_H JS_HAVE_MACHINE_ENDIAN_H JS_HAVE_SYS_ISA_DEFS_H \
    JS_SYS_TYPES_H_DEFINES_EXACT_SIZE_TYPES JS_HAVE___INTN JS_STDDEF_H_HAS_INTPTR_T JS_CRTDEFS_H_HAS_INTPTR_T \
    JS_INT8_TYPE JS_INT16_TYPE JS_INT32_TYPE JS_INT64_TYPE JS_INTPTR_TYPE JS_BYTES_PER_WORD \
    JS_METHODJIT=$(JS_ENABLE_METHODJIT) JS_HAS_XML_SUPPORT

js_confdefs_h_SOURCE                = js-confdefs.h.in
js_confdefs_h_TARGET                = $(JS_CONFDEFS_H)
js_confdefs_h_ALLDEFS_STATIC.os2    = js-confdefs.os2.h
js_confdefs_h_ALLDEFS_VARS.os2      = \
    JS_THREADSAFE JS_HAS_CTYPES JS_HAS_XML_SUPPORT JS_BYTES_PER_WORD JS_HAVE_ENDIAN_H JS_HAVE_MACHINE_ENDIAN_H \
    JS_METHODJIT=$(JS_ENABLE_METHODJIT) JS_METHODJIT_TYPED_ARRAY=$(JS_ENABLE_METHODJIT_TYPED_ARRAY)
js_confdefs_h_ALLDEFS_VARS_QUOTED.os2 =

# manually generated headers

JSAUTOKW_H = $(js_0_OUTDIR)/jsautokw.h

$$(JSAUTOKW_H): $$(host_jskwgen_1_TARGET) $$(js_DEFPATH)/jskeyword.tbl | $$(call DIRDEP,$$(dir $$@))
	%$(call MSG_GENERATE,js,$@)
	$(QUIET)$< $@

js_CLEAN   += $(JSAUTOKW_H)

JSAUTOOPLEN_H = $(js_0_OUTDIR)/jsautooplen.h

$$(JSAUTOOPLEN_H): $$(host_jsoplengen_1_TARGET) $$(js_DEFPATH)/jsopcode.tbl | $$(call DIRDEP,$$(dir $$@))
	%$(call MSG_GENERATE,js,$@)
	$(QUIET)$< $@

js_CLEAN   += $(JSAUTOOPLEN_H)

SELFHOSTED_OUT_H = $(js_0_OUTDIR)/selfhosted.out.h

SELFHOSTED_OUT_H_SRCS = \
    $(addprefix $(js_DEFPATH)/, \
        builtin/array.js \
    )

SELFHOSTED_OUT_H_DEPS = \
    $(SELFHOSTED_OUT_H_SRCS) \
    $(addprefix $(js_DEFPATH)/, \
        js.msg \
        builtin/macros.py \
        builtin/js2c.py \
        builtin/embedjs.py \
    )

$$(SELFHOSTED_OUT_H): $$(SELFHOSTED_OUT_H_DEPS)
	%$(call MSG_GENERATE,js,$@)
	$(QUIET)$(PYTHON) $(js_DEFPATH)/builtin/embedjs.py $@ $(js_DEFPATH)/js.msg \
		$(js_DEFPATH)/builtin/macros.py $(SELFHOSTED_OUT_H_SRCS)

js_CLEAN   += $(SELFHOSTED_OUT_H)

# rest

js_DEPS    += $(JSAUTOKW_H) $(JSAUTOOPLEN_H) $(SELFHOSTED_OUT_H)

js_INCS    += . $(js_0_OUTDIR)

js_DEFS    += EXPORT_JS_API

ifdef JS_HAS_CTYPES
js_DEFS += JS_HAS_CTYPES DLL_PREFIX=\"$(DLL_PREFIX)\" DLL_SUFFIX=\"$(DLL_SUFFIX)\"
endif

ifdef JS_VERSION
js_DEFS += JS_VERSION=$(JS_VERSION)
endif

# We do not want to have obsolete NSPR functionality in threadsafe builds.
js_DEFS += NO_NSPR_10_SUPPORT

# @todo: according to Makefile.in, this shoud only apply to js/src/assembler sources
js_DEFS += USE_SYSTEM_MALLOC=1 ENABLE_ASSEMBLER=1

ifneq (,$(JS_ENABLE_YARR_JIT)$(JS_ENABLE_METHODJIT))
js_DEFS += ENABLE_JIT=1
endif

js_INCS += assembler yarr $(PATH_ROOT)/mfbt/double-conversion

js_SOURCES = \
	jsalloc.cpp \
	jsanalyze.cpp \
	jsapi.cpp \
	jsarray.cpp \
	jsatom.cpp \
	jsbool.cpp \
	jsclone.cpp \
	jscntxt.cpp \
	jscompartment.cpp \
	jsdate.cpp \
	jsdbgapi.cpp \
	jsdhash.cpp \
	jsdtoa.cpp \
	jsexn.cpp \
	jsfriendapi.cpp \
	jsfun.cpp \
	jsgc.cpp \
	jscrashreport.cpp \
	jsinfer.cpp \
	jsinterp.cpp \
	jsiter.cpp \
	jslog2.cpp \
	jsmath.cpp \
	jsnativestack.cpp \
	jsnum.cpp \
	jsobj.cpp \
	json.cpp \
	jsonparser.cpp \
	jsopcode.cpp \
	jsproxy.cpp \
	jsprf.cpp \
	jsprobes.cpp \
	jspropertycache.cpp \
	jspropertytree.cpp \
	jsreflect.cpp \
	jsscope.cpp \
	jsscript.cpp \
	jsstr.cpp \
	jstypedarray.cpp \
	jsutil.cpp \
	jswatchpoint.cpp \
	jsweakmap.cpp \
	jswrapper.cpp \
	jsxml.cpp \
	prmjtime.cpp \
	sharkctl.cpp \
	MemoryMetrics.cpp \
	$(addprefix vm/, \
		ArgumentsObject.cpp \
		ScopeObject.cpp \
		Debugger.cpp \
		GlobalObject.cpp \
		ObjectImpl.cpp \
		Stack.cpp \
		String.cpp \
		SPSProfiler.cpp \
		RegExpObject.cpp \
		RegExpStatics.cpp \
		StringBuffer.cpp \
		Unicode.cpp \
		Xdr.cpp \
	) \
	$(addprefix frontend/, \
		BytecodeCompiler.cpp \
		BytecodeEmitter.cpp \
		FoldConstants.cpp \
		NameFunctions.cpp \
		ParseMaps.cpp \
		ParseNode.cpp \
		Parser.cpp \
		TokenStream.cpp \
	) \
	$(addprefix builtin/, \
		ParallelArray.cpp \
		TestingFunctions.cpp \
		Eval.cpp \
		RegExp.cpp \
		MapObject.cpp \
	) \
	$(addprefix ds/, \
		LifoAlloc.cpp \
	) \
	$(addprefix gc/, \
		Marking.cpp \
		Memory.cpp \
		Statistics.cpp \
		StoreBuffer.cpp \
	)

ifdef JS_ENABLE_METHODJIT
js_SOURCES += \
	$(addprefix methodjit/, \
		MethodJIT.cpp \
		StubCalls.cpp \
		Compiler.cpp \
		FrameState.cpp \
		FastArithmetic.cpp \
		FastBuiltins.cpp \
		FastOps.cpp \
		LoopState.cpp \
		StubCompiler.cpp \
		MonoIC.cpp \
		PolyIC.cpp \
		ImmutableSync.cpp \
		InvokeHelpers.cpp \
		Retcon.cpp \
		TrampolineCompiler.cpp \
	)
endif

js_SOURCES += \
	assembler/jit/ExecutableAllocator.cpp \
	yarr/PageBlock.cpp \
	yarr/YarrInterpreter.cpp \
	yarr/YarrPattern.cpp \
	yarr/YarrSyntaxChecker.cpp

ifdef JS_ENABLE_METHODJIT_SPEW
js_SOURCES += \
	Logging.cpp
endif

ifn1of (win os2, $(KBUILD_TARGET))
js_SOURCES += \
	assembler/jit/ExecutableAllocatorPosix.cpp \
	yarr/OSAllocatorPosix.cpp
endif

ifeq ($(KBUILD_TARGET), win)
js_SOURCES += \
	assembler/jit/ExecutableAllocatorWin.cpp \
	yarr/SAllocatorWin.cpp
endif

ifeq ($(KBUILD_TARGET), os2)
js_SOURCES += \
	assembler/jit/ExecutableAllocatorOS2.cpp \
	yarr/OSAllocatorOS2.cpp
endif

ifdef JS_ENABLE_YARR_JIT
js_DEFS += ENABLE_YARR_JIT=1
js_SOURCES += \
	assembler/assembler/ARMAssembler.cpp \
	assembler/assembler/MacroAssemblerARM.cpp \
	assembler/assembler/MacroAssemblerX86Common.cpp \
	yarr/YarrJIT.cpp
endif

ifdef JS_HAS_CTYPES

ifdef MOZ_NATIVE_FFI
js_INCS += $(error Need native FFI include paths)
js_LIBS += $(error Need native FFI libs)
else
js_INCS += ctypes/libffi/include $(libffi_0_OUTDIR)/include
js_LIBS += $(libffi_1_TARGET)
endif

js_SOURCES += \
    ctypes/CTypes.cpp \
    ctypes/Library.cpp

endif # JS_HAS_CTYPES

js_SOURCES += perf/jsperf.cpp
ifdef HAVE_LINUX_PERF_EVENT_H
js_SOURCES += perf/pm_linux.cpp
else
js_SOURCES += perf/pm_stub.cpp
endif

js_INCS += $(NSPR_INCS)
js_LIBS += $(NSPR_LIBS)

ifdef ZLIB_LIBS
js_DEFS += USE_ZLIB
js_LIBS += $(ZLIB_LIBS)
endif

include $(FILE_SUB_FOOTER)
