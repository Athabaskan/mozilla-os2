## @file
# Top-level makefile
#

SUB_DEPTH = .
include $(KBUILD_PATH)/subheader.kmk

#
# Configure target prepares cached settings by putting them to a dedicated
# .kmk file that is included by Config.kmk. It is intended for variables that
# require running other programs (like text processors) to get their values
# so they would slow down the build process if evaluated each time kmk is run.
#

.PHONY: configure
configure: | $$(call DIRDEP,$$(dir $$(CACHED_CONFIG)))
	$(QUIET)$(ECHO) Obtaining and saving build settings to $(CACHED_CONFIG)...
	$(QUIET)$(RM) -f $(CACHED_CONFIG)

	$(QUIET)$(SHELL) -c ' \
	\
	MOZILLA_VERSION=`$(PERL) $(PATH_ROOT)/config/milestone.pl -topsrcdir $(PATH_ROOT) 2>nul` ; \
	MOZILLA_UAVERSION=`$(PERL) $(PATH_ROOT)/config/milestone.pl -topsrcdir $(PATH_ROOT) -uaversion 2>nul` ; \
	FIREFOX_VERSION=`cat $(PATH_ROOT)/browser/config/version.txt` ; \
	\
	test -f $(PATH_ROOT)/$(MOZ_BUILD_APP)/confvars.sh && . $(PATH_ROOT)/$(MOZ_BUILD_APP)/confvars.sh ; \
	\
	test -z "$$MOZ_BRANDING_DIRECTORY" || MOZ_BRANDING_DIRECTORY=$(MOZ_BUILD_APP)/branding/nightly ; \
	test -f $(PATH_ROOT)/$$MOZ_BRANDING_DIRECTORY/configure.sh && . $(PATH_ROOT)/$$MOZ_BRANDING_DIRECTORY/configure.sh ; \
	\
	$(shell $(SED) -nre " \
		s:^MOD_MAJOR_VERSION=+([0-9]+)$$:NSPR_MAJOR_VERSION=\1\;:p; \
		s:^MOD_MINOR_VERSION=+([0-9]+)$$:NSPR_MINOR_VERSION=\1\;:p; \
		s:^MOD_PATCH_VERSION=+([0-9]+)$$:NSPR_PATCH_VERSION=\1\;:p; \
		" < $(PATH_ROOT)/nsprpub/configure.in) \
	\
	$(APPEND_EXT) -n $(CACHED_CONFIG) \
		$(foreach var, $(SHELL_CONFIG_VARS), "$(var) ?= $$$(var)") \
	\
'
	$(QUIET)$(CAT) $(CACHED_CONFIG)

	$(QUIET)$(APPEND) $(CACHED_CONFIG) 'CACHED_CONFIG_INCLUDED := 1'
	$(QUIET)$(ECHO) Done.

BLDDIRS += $(call DIRDEP,$(dir $(CACHED_CONFIG)))
OTHER_CLEAN += $(CACHED_CONFIG)

#
# Global config headers.
#

USES += config-files

CONFIG_FILES += mozilla_confdefs_h

mozilla_confdefs_h_SOURCE             = mozilla-config.h.in
mozilla_confdefs_h_TARGET             = $(MOZILLA_CONFIG_H)
mozilla_confdefs_h_ALLDEFS_STATIC.os2 = mozilla-config.os2.h
mozilla_confdefs_h_ALLDEFS_VARS       = $(CONFIG_VARS)
mozilla_confdefs_h_ALLDEFS_VARS_QUOTED = $(CONFIG_VARS_QUOTED)

CONFIG_FILES += xpcom_config_h xpcom_private_h

xpcom_config_h_MODE     = cdefs
xpcom_config_h_SOURCE   = xpcom/xpcom-config.h.in
xpcom_config_h_TARGET   = $(XPCOM_CONFIG_H)
xpcom_config_h_VARS.os2 = \
    CPP_THROW_NEW=throw() HAVE_CPP_2BYTE_WCHAR_T=1 HAVE_CPP_AMBIGUITY_RESOLVING_USING=1 \
    HAVE_CPP_CHAR16_T HAVE_CPP_DYNAMIC_CAST_TO_VOID_PTR=1 HAVE_CPP_PARTIAL_SPECIALIZATION=1 \
    HAVE_CPP_TROUBLE_COMPARING_TO_ZERO HAVE_STATVFS=1 NEED_CPP_UNUSED_IMPLEMENTATIONS=1 \
    NEW_H=<new> NS_ATTR_MALLOC=__attribute__((malloc)) \
    NS_WARN_UNUSED_RESULT=__attribute__((warn_unused_result))

xpcom_private_h_MODE       = cdefs
xpcom_private_h_SOURCE     = xpcom/xpcom-private.h.in
xpcom_private_h_TARGET     = $(XPCOM_PRIVATE_H)
xpcom_private_h_VARS.os2 = \
    HAVE_GETPAGESIZE=1 HAVE_ICONV HAVE_ICONV_WITH_CONST_INPUT HAVE_MBRTOWC=1 \
    HAVE_SYS_MOUNT_H HAVE_SYS_VFS_H=1 HAVE_WCRTOMB=1

#
# Install global headers.
#

INSTALLS += global_exports

global_exports_INST     = include/
global_exports_SOURCES += \
    $(MOZILLA_CONFIG_H) \
    config/nsStaticComponents.h \
    $(XPCOM_CONFIG_H)

#
# Include sub-makefiles.
#

# tier base
INCLUDE_SUBDIRS += build mfbt modules/zlib mozglue memory/mozalloc

# tier nspr
INCLUDE_SUBDIRS += nsprpub

# tier js
INCLUDE_SUBDIRS += js/src

# tier platform
INCLUDE_SUBDIRS += \
    xpcom modules/libpref intl netwerk ipc js/xpconnect modules/libjar \
    storage uriloader caps parser dom widget toolkit gfx image view content layout \
    docshell accessible embedding xpfe/appshell security/manager startupcache

include $(FILE_SUB_FOOTER)
