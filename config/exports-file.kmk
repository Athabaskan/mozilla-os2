## @file
# exports-file unit.
#
# The exports-file unit adds support for processing Mozilla-style cross-plaform
# shared library export list files. Use it like that:
#
#     DLLS += mydll
#     mydll_USES += exports-file
#     mydll_EXPORTS_FILE = mydll.def
#

UNIT_exports-file = exports-file

ifneq ($(KBUILD_TARGET),os2)
$(error Support for $(KBUILD_TARGET) is missing)
endif

#
# Generator for EXPORTS_FILE rule.
#
define def_unit_exports-file_target_rule

$(out_def): $(src_def) | $(call DIRDEP,$(dir $(out_def)))
	%$$(call MSG_GENERATE,$(target),$(out_def),$(src_def))
	$(QUIET)$(RM) -f $(out_def)
	$(QUIET)$(APPEND_EXT) -n $(out_def) \
		"LIBRARY $(name) INITINSTANCE TERMINSTANCE" \
		"CODE LOADONCALL MOVEABLE DISCARDABLE" \
		"DATA PRELOAD MOVEABLE MULTIPLE NONSHARED" \
		"EXPORTS"
	$(QUIET)$(GREP) -v ';+' $(src_def) | grep -v ';-' | \
		$(SED) -e 's; DATA ;;' -e 's,;;,,' -e 's,;.*,,' -e 's,\([\t ]*\),\1_,' | \
		$(AWK) 'BEGIN {ord=1;} { print($$$$0 " @" ord " RESIDENTNAME"); ord++;}' >> $(out_def)

endef # define def_unit_exports-file_target_rule

#
# Unit hook for target's EXPORTS_FILE property.
#
define def_unit_exports-file_target_pre

ifeq ($($(target)_EXPORTS_FILE),)
 $(error exports-file unit reqires $(target)_EXPORTS_FILE to be set)
endif

local src_def := $(abspathex $($(target)_EXPORTS_FILE),$(defpath))
local out_def := $(outbase).def

$(eval $(def_unit_exports-file_target_rule))

$(eval $(target)_GEN_SOURCES_ += $(out_def))
$(eval $(target)_CLEAN += $(out_def))

endef # def_unit_exports-file_target_pre
