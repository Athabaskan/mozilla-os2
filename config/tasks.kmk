## @file
# tasks unit.
#
# This unit allows to execute arbitrary tasks that generate some kind of output
# from some kind of source.
#
# Using the tasks unit starts with the following code:
#
#     USES += tasks
#     ALL_TARGETS += $(TASKS)
#
# Here are the key usage patterns:
#
# 1. Generate a single target from one or more sources using a simple command.
#
#     TASKS + mytask
#     mytask_SOURCE = mysrc1 mysrc2
#     mytask_TARGET = mytgt
#     mytask_COMMAND = echo $(src) > $(out)
#
#    Note that paths to files given in _SOURCE are taken relative to the makefile
#    location (accessible as $(mytask_DEFPATH) in deferred context) . Path to files
#    given in _TARGET are relative to the targets's default output directory (accessible
#    as $(mytask_0_OUTDIR)). The full path to the generated target is stored in
#    $(mytask_1_TARGET).
#
#    The following local variables may be used within the _COMMAND body:
#
#    - $(src)     All source files from _SOURCE with the default path applied.
#    - $(out)     Full path to the _TARGET file.
#    - $(defpath) Full path to the target's source directory (makefile location).
#    - $(outdir)  Full path to the target's output directory.
#    - $(outbase) Full path to the target's output base name (w/o extension).
#
# 2. Generate several targets and an intermediate file from several sources using
#    a complex command.
#
#     TASKS + mytask
#     mytask_SOURCE = mysrc1 mysrc2 mysrc3
#     mytask_OUTPUT = mytgt1 mytgt2
#     mytask_INTERMEDIATE = mymap
#     define mytask_COMMANDS
#         $(QUIET)echo $(src) mode1 > $(word 1,$(output))
#         $(QUIET)echo $(src) mode2 > $(word 2,$(output))
#         $(QUIET)cd $(outdir) && echo $(src) > mymap
#     endef
#
#    As with _TARGET from the example above, paths in _OUTPUT and _INTERMEDIATE are
#    relative to the target's default output directory. Note that lines for the the
#    complex command must start with a TAB character (you may optionally use $(TAB)
#    instead) and if you want to suppress echoing the commands by default you should
#    manually use $(QUIET) in front of them.
#
#    Note that if _TARGET is not set, a dummy file, $(outbase).task, is used as a single final
#    target. If you have multiple targets (using _OUTPUT) and want to avoid this dummy file,
#    assign one of your targets to _TARGET and the rest - to _OUTPUT.
#
#    In addition to the above the following local variables for _COMMANDS are available:
#
#    - $(output)  All output files from _OUTPUT with the default path applied.
#    - $(maybe)   All intermediate files from _INTERMEDIATE with the default path applied.
#
# 3. Generate several targets in multi-task mode where each source file is converted to a separate
#    target using a defined set of commands.
#
#     TASKS + mytask
#     mytask_SOURCES = 1.src 2.src 3.src
#     mytask_SOURCE_TARGET = $(notdir $(basename $(src))).tgt
#     mytask_SOURCE_COMMAND = echo $(src) > $(out)
#
#    Note that _TARGET is implicitly set to a dummy file as in the example above.
#
# 4. Generate several targets in multi-task mode and combine them all to a final target...
#

UNIT_tasks = tasks

include $(dir $(lastword $(MAKEFILE_LIST)))helpers.kmk

#
#
#
define def_unit_tasks_global_target_rule

$(out) + $(output) +| $(maybe) : $(src_) $$($(target)_DEPS_) $(value TARGET_OUT_DEP_CHECK) | $$($(target)_ODEPS_) $(call DIRDEP,$(dir $(out)))
$(TAB)$(msg)
$(TAB)$(QUIET2)$(RM) -f $(out) $(output) $(maybe) $(dep)
$(cmds)
$(TARGET_OUT_DEP_CMDS)

endef # def_unit_tasks_global_target_rule

#
#
#
define def_unit_tasks_global_target_src_rule

$(out) + $(output) +| $(maybe) : $(src) $$($(target)_SRC_DEPS_) $(value TARGET_OUT_DEP_CHECK) | $(call DIRDEP,$(dir $(out)))
$(TAB)$(src_msg)
$(TAB)$(QUIET2)$(RM) -f $(out) $(output) $(maybe) $(dep)
$(src_cmds)
$(TARGET_OUT_DEP_CMDS)

endef # def_unit_tasks_global_target_src_rule

#
# Worker for each SOURCE in multi-task mode
#
define def_unit_tasks_global_target_src

local out    := $($(src_out_v))
local output := $($(src_output_v))
local maybe  := $($(src_maybe_v))

# apply default paths
local out    := $(abspathex $(out),$(outdir))
local output := $(abspathex $(output),$(outdir))
local maybe  := $(abspathex $(maybe),$(outdir))

local dep    := $(out).dep

$(eval $(target)_1_SOURCE_TARGET += $(out))
$(eval $(target)_1_SOURCE_OUTPUT += $(output))
$(eval $(target)_1_SOURCE_INTERMEDIATE += $(maybe))

$(eval $(def_unit_tasks_global_target_src_rule))

# update globals
$(eval _OUT_FILES += $(out) $(output) $(maybe))
$(eval _DEPFILES += $(dep))

endef # def_unit_tasks_global_target_src

#
# Worker for global TASKS targets.
#
define def_unit_tasks_global_target

local bld_trg      := $(KBUILD_TARGET)
local bld_trg_arch := $(KBUILD_TARGET_ARCH)
local bld_trg_cpu  := $(KBUILD_TARGET_CPU)
local bld_type     := $(KBUILD_TYPE)

local name := $(call TARGET_PROP_FIRST,NAME,$(target))

local outbase := $(call TARGET_BASE,$(name),$(target))

local defpath := $($(target)_DEFPATH)
local outdir  := $($(target)_0_OUTDIR)

local src    := $(strip $(call TARGET_PROP_ALL,SOURCE) $(call TARGET_PROP_ALL,SOURCES))
local out    := $(call TARGET_PROP_FIRST,TARGET)
local output := $(call TARGET_PROP_ALL,OUTPUT)
local maybe  := $(call TARGET_PROP_ALL,INTERMEDIATE)

local incs   := $(call TARGET_PROP_ALL,INCS)
local flags  := $(call TARGET_PROP_ALL,FLAGS)

local deps   := $(call TARGET_PROP_ALL_VAL,DEPS)
local odeps  := $(call TARGET_PROP_ALL_VAL,ORDERDEPS)

local clean   := $(call TARGET_PROP_ALL,CLEAN)
local blddirs := $(call TARGET_PROP_ALL,BLDDIRS)

local cmds_v := $(call TARGET_PROP_FIRST_VAR,COMMANDS)
local msg_v  := $(call TARGET_PROP_FIRST_VAR,MESSAGE)

ifeq ($(src),)
 $(error Either $(target)_SOURCE or $(target)_SOURCES property must be defined)
endif

local src_out_v    := $(call TARGET_PROP_FIRST_VAR,SOURCE_TARGET)
local src_output_v := $(call TARGET_PROP_FIRST_VAR,SOURCE_OUTPUT)
local src_maybe_v  := $(call TARGET_PROP_FIRST_VAR,SOURCE_INTERMEDIATE)
local src_cmds_v   := $(call TARGET_PROP_FIRST_VAR,SOURCE_COMMANDS)
local src_msg_v    := $(call TARGET_PROP_FIRST_VAR,SOURCE_MESSAGE)

local src_deps     := $(call TARGET_PROP_ALL_VAL,SOURCE_DEPS)

local src_cmds :=

ifeq ($(value $(src_cmds_v)),)
 local src_cmds_v := $(call TARGET_PROP_FIRST_VAR,SOURCE_COMMAND)
 ifneq ($(value $(src_cmds_v)),)
  local src_cmds = $(TAB)$(QUIET)$($(src_cmds_v))
 else
  ifneq ($(value $(src_out_v)),)
   $(error Property $(target)_SOURCE_TARGET requires $(target)_SOURCE_COMMAND(S) to be defined)
  endif
 endif
else
 local src_cmds = $($(src_cmds_v))
endif

ifneq ($(value src_cmds),)
 ifeq ($(value $(src_out_v)),)
  $(error [$(value src_cmds) - $(target)] Property $(target)_SOURCE_COMMAND(S) requires $(target)_SOURCE_TARGET to be defined)
 endif
endif

local cmds :=

ifeq ($(value $(cmds_v)),)
 local cmds_v := $(call TARGET_PROP_FIRST_VAR,COMMAND)
 ifneq ($(value $(cmds_v)),)
  local cmds = $(TAB)$(QUIET)$($(cmds_v))
 else
  ifeq ($(value src_cmds),)
   $(error Either $(target)_COMMAND or $(target)_COMMANDS property must be defined)
  endif
 endif
else
 local cmds = $($(cmds_v))
endif

ifeq ($(value src_cmds),)
 ifeq ($(out)$(output),)
  $(error Either $(target)_TARGET or $(target)_OUTPUT property must be defined)
 endif
endif

# apply default paths
local src    := $(abspathex $(src),$(defpath))
local out    := $(abspathex $(out),$(outdir))
local output := $(abspathex $(output),$(outdir))
local maybe  := $(abspathex $(maybe),$(outdir))
local incs   := $(abspathex $(incs),$(defpath))

# defer absolutization of the dep vars since they may contain
# deferred refs (which are not expanded by now)
$(target)_DEPS_     := $$(abspathex $(deps),$$($(target)_DEFPATH))
$(target)_ODEPS_    := $$(abspathex $(odeps),$$($(target)_DEFPATH))
$(target)_SRC_DEPS_ := $$(abspathex $(src_deps),$$($(target)_DEFPATH))

ifeq ($(out),)
 local out  := $(outbase).task
 local dep  := $(outbase).dep
 local cmds += $(NLTAB)$(QUIET2)$(APPEND) $(out)
else
 local dep  := $(out).dep
endif

local msg :=

ifeq ($(value $(msg_v)),)
 local msg = $(call MSG_GENERATE,$(target),$(out),$(src))
else
 local msg = %@$($(msg))
endif

local src_msg :=

ifeq ($(value $(src_msg_v)),)
 local src_msg = $(call MSG_GENERATE,$(target),$(out),$(src))
else
 local src_msg = %@$($(src_msg_v))
endif

$(target)_1_TARGET       := $(out)
$(target)_1_OUTPUT       := $(output)
$(target)_1_INTERMEDIATE := $(maybe)

# call the custom pre-procedure
$(evalval $($(call TARGET_PROP_FIRST_VAR,PRE_HOOK)))

# go through individual sources when appropriate (multi-task mode)
ifneq ($(src_cmds),)

$(eval $(target)_1_SOURCE_TARGET :=)
$(eval $(target)_1_SOURCE_OUTPUT :=)

local all_dep := $(dep)
local all_src := $(src)

$(foreach src,$(all_src),$(evalval def_unit_tasks_global_target_src))

local dep := $(all_dep)

local maybe  := $($(target)_1_INTERMEDIATE)
local output := $($(target)_1_OUTPUT)
local out    := $($(target)_1_TARGET)

local src_out    := $($(target)_1_SOURCE_TARGET)
local src_output := $($(target)_1_SOURCE_OUTPUT)
local src_maybe  := $($(target)_1_SOURCE_INTERMEDIATE)

local src_ = $(src_out)

else # ifneq ($(src_cmds),)

local src_ = $(src)

endif # ifneq ($(src_cmds),)

$(eval $(def_unit_tasks_global_target_rule))

# update globals
$(eval _OUT_FILES   += $(out) $(output) $(maybe))
$(eval _DEPFILES    += $(dep))
$(eval _CLEAN_FILES += $(clean))
$(eval _DIRS        += $(blddirs))

$(eval $(target): $(out))

$(eval OTHERS += $(target))

# call the custom post-procedure
$(evalval $($(call TARGET_PROP_FIRST_VAR,POST_HOOK)))

endef # def_unit_tasks_global_target

#
# Unit hook for global TASKS targets.
#

# Perform inheritance.
properties := \
    INST IDL_INST HEADER_INST SOURCE PRE_HOOK POST_HOOK
properties_now_l := SOURCES INCS CLEAN BLDDIRS
properties_now_r := FLAGS
properties_deferred := \
    TARGET OUTPUT COMMAND COMMANDS SOURCE_TARGET SOURCE_OUTPUT SOURCE_INTERMEDIATE \
    SOURCE_COMMAND SOURCE_COMMANDS
properties_deferred_l := DEPS ORDERDEPS SOURCE_DEPS
$(foreach trg,$(TASKS),$(evalval def_inherit))
properties :=
properties_now_l :=
properties_deferred :=
properties_deferred_l :=

# Perform instantiation.
$(foreach target,$(TASKS),$(evalval def_unit_tasks_global_target))
