## @file
# Global footer makefile
#
# This gets included in every Makefile.kmk instead of the default kBuild footer
# $(FILE_KBUILD_SUB_FOOTER) in order to perform extra processing.
#

ifeq ($(_SUB_MAKEFILE_STACK),)

#
# This part is included from the top-most makefile, most processing goes here.
# ============================================================================
#

#
# Global definitions.
# -------------------
#

##
# Emits commands to generate a dep file containing the commands to produce the given output.
# Used as $(TARGET_OUT_DEP_CMDS) in the output generation rule.
# Expects the standard vars to be set ($(target), $(dep) and $(out)).
# Requires `includedep $(dep)` somewhere in the makefile in order to work.
#
ifndef NO_COMPILE_CMDS_DEPS
define TARGET_OUT_DEP_CMDS
	%$$(QUIET2)$$(APPEND) '$(dep)'
	%$$(QUIET2)$$(APPEND) '$(dep)' 'define $(target)_$(subst :,_,$(out))_CMDS_PREV_'
	%$$(QUIET2)$$(APPEND) -c '$(dep)' '$(out)'
	%$$(QUIET2)$$(APPEND) '$(dep)' 'endef'
endef # TARGET_OUT_DEP_CMDS
else
 TARGET_OUT_DEP_CMDS =
endif

##
# Emits FORCE if the commands to produce the given output differ from the previous value.
# Used as $(value TARGET_OUT_DEP_CHECK) in the output generation rule's rerequisite list.
# Expects the standard vars to be set ($(target), $(dep) and $(out)).
# Requires `includedep $(dep)` somewhere in the makefile in order to work.
#
ifndef NO_COMPILE_CMDS_DEPS
 TARGET_OUT_DEP_CHECK = $$(comp-cmds-ex $$($(target)_$(subst :,_,$(out))_CMDS_PREV_),$$(commands $(out)),FORCE)
else
 TARGET_OUT_DEP_CHECK =
endif

##
# Gathers all variants of the given target property taking $(bld_trg), $(bld_trg_arch),
# $(bld_cpu) and $(bld_type) suffixes into account. Requires $(target) to be set in
# additon to the suffix variables.
# @param 1  Target variable name (w/o underscore).
#
TARGET_PROP_ALL = $(strip \
    $($(target)_$(1).$(bld_trg).$(bld_trg_arch).$(bld_type)) \
    $($(target)_$(1).$(bld_trg).$(bld_trg_arch)) \
    $($(target)_$(1).$(bld_trg).$(bld_type)) \
    $($(target)_$(1).$(bld_trg_cpu)) \
    $($(target)_$(1).$(bld_trg_arch)) \
    $($(target)_$(1).$(bld_trg)) \
    $($(target)_$(1).$(bld_type)) \
    $($(target)_$(1)) \
)

#
# Hook that adds support for _PP_SOURCES to INSTALLS targets.
# -----------------------------------------------------------
#

##
# Deals with one source from _PP_SOURCES of INSTALLS targets by
# preprocessing it withn Preprocessor.py and adding to _SOURCES.
#
# The following variables are recongnized on the source:
# - _DEFS: list of defines passed to Preprocessor.py.
# - _DEPS: list of dependencies for the target.
#
define def_installs_pp_src

local tgt := $$($(target)_0_OUTDIR)/$(notdir $(src))
local srcsrc := $(abspathex $(src),$($(target)_DEFPATH))

$(eval $$(subst :,_,$$(srcsrc))_DEFS = $$($(src)_DEFS))

$(tgt): $(srcsrc) $($(src)_DEPS) | $$(call DIRDEP,$$(dir $$@))
	%$(call MSG_GENERATE,,$@)
	$(QUIET)$(PYTHON) $(PATH_ROOT)/config/Preprocessor.py $(addprefix -D,$($(subst :,_,$<)_DEFS)) $< > $@

$(eval OTHER_CLEAN += $(tgt))

$(eval $(target)_SOURCES += $(tgt))

endef # def_installs_pp_src

##
# Deals with one INSTALLS target (wrt _PP_SOURCES).
#
define def_installs_pp_sources

$(foreach src,$($(target)_PP_SOURCES),$(evalval def_installs_pp_src))

endef # def_installs_pp_sources

$(foreach target,$(INSTALLS),$(evalval def_installs_pp_sources))

#
# This is included from each sub-makefile.
# ========================================
#

else # ifeq ($(_SUB_MAKEFILE_STACK),)

endif # ifeq ($(_SUB_MAKEFILE_STACK),)

#
# Include the default kBuild footer.
#
include $(FILE_KBUILD_SUB_FOOTER)
