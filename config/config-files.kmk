## @file
# config-files unit.
#
# This unit allows to generate files from templates. This is usually used to generate
# config.h from config.h.in and confdefs.h from confdefs.h.in.
#
# Usage in global mode starts with the following code:
#
#     USES += config-files
#     ALL_TARGETS += $(CONFIG_FILES)
#
# Here are key usage modes:
#
# 1. Generate a header file from the template replacing all occurences of `@MYDEF@` with the value
#    of the MYDEF kmk variable or with the given value if the `MYDEF=MYVAL` form is used. The file given
#    in _SOURCE is relative to the Makefile location, in _TARGET - to the output directory for the
#    target (normally $(PATH_OUT)/<target_name>). If the _VARS property is empty, the source file is
#    simply symlinked to the target (unless _MODE contains `no_symlink` in which case the file is
#    copied).
#
#     CONFIG_FILES += myhdr_h
#     myhdr_h_SOURCE = myhdr.h.in
#     myhdr_h_TARGET = myhdr.h
#     myhdr_h_VARS   = MYDEF1 MYDEF2=$(OTHERDEF) MYDEF3
#
# 2. Same as the above but for the templates containing the `@ALLDEFINES@` token which is
#    replaced with the `#define MYDEF=MYVAL` statements for each non-empty variable from _VARS or
#    _ALLDDEFS_VARS_QUOTED (which is just the same as _VARS but emits double-quoted values).
#    In addition, contents of all files listed in _ALLDEFS_STATIC are appended to the resulting
#    value for the token before replacing it. This variant may be combined with the normal _VARS
#    defines described above.
#
#     CONFIG_FILES += confdefs_h
#     confdefs_h_SOURCE              = confdefs.h.in
#     confdefs_h_TARGET              = confdefs.h
#     confdefs_h_ALLDEFS_VARS        = MYDEF1 MYDEF2=$(OTHERDEF) MYDEF3
#     confdefs_h_ALLDEFS_VARS_QUOTED = MYDEF4=1.2.3
#     confdefs_h_ALLDEFS_STATIC      = confdefs_static.h
#     confdefs_h_VARS                = MYDEF5 MYDEF6
#
# 3. Generate a config.h from the template replacing `#undef MYDEF` lines with either `#define MYDEF=MYVAL`
#    if MYVAL is not empty or with `/* #undef MYDEF */` otherwise. All defines not listed in _VARS are
#    left untouched[
#
#     CONFIG_FILES += my_config_h
#     my_config_h_MODE   = cdefs
#     my_config_h_SOURCE = my_config.h.in
#     my_config_h_TARGET = my_config.h
#     my_config_h_VARS   = MYDEF1 MYDEF2=$(OTHERDEF) MYDEF3
#
# Using config-files in target-specific mode is very similar:
#
#     DLLS += mydll
#     mydll_USES += config-files
#     mydll_CONFIG_FILES += myhdr_h
#
#     myhdr_h_SOURCE += myhdr.h.in
#     # ...
#     # the rest is the same as above
#
# There only significant difference is that the files in the _TARGET property are taken relative to the
# parent target's output directory (i.e. $(PATH_OUT)/mydll instead of $(PATH_OUT)/myhdr_h in this case),
# which is useful for target-specific headers not used anywhere else. Also, the parent target is
# automatically made dependent on the generated headers to ensure they are generated before the sources
# for the parent target are compiled (in global mode you have to set such dependencies manually).
#

UNIT_config-files = config-files

include $(dir $(lastword $(MAKEFILE_LIST)))helpers.kmk

#
# Sanity
#
ifneq ($(CONFIG_FILES),)
ifeq ($(filter $(CONFIG_FILES),$(ALL_TARGETS)),)
 $(error Global use of config-files unit requires ALL_TARGETS += $$(CONFIG_FILES) after USES or in Config.kmk)
endif
endif

#
#
#
define def_config-files_target_cdefs_rule

$(out): $(src) $(value TARGET_OUT_DEP_CHECK) | $(call DIRDEP,$(dir $(out)))
	%$$(call MSG_GENERATE,$(target),$(out),$(src))
	$(QUIET)$(RM) -f $(out) $(dep)
	$(QUIET)$(SED) -r $(foreach v, $(vars), \
		$(foreach vl, $(firstword $(subst =, ,$(v))), \
			-e "s:(^ *# *undef +$(vl) *$$$$):$(if $(findstring =,$(v)),$(foreach vr,$(lastword $(subst =, ,$(v))),$(if $(vr),#define $(vl) $(subst :,\:,$(subst ",\",$(vr))),/\* \1 \*/)),$(if $($(vl)),#define $(vl) $(subst :,\:,$(subst ",\",$($(vl)))),/\* \1 \*/)):")) \
		$(src) > $(out)

$(TARGET_OUT_DEP_CMDS)

endef # def_config-files_target_cdefs_rule

#
#
#
define def_config-files_target_rule

$(out) +| $(tmp) : $(src) $(value TARGET_OUT_DEP_CHECK) | $(call DIRDEP,$(dir $(out)))
	%$$(call MSG_GENERATE,$(target),$(out),$(src))
	$(QUIET)$(RM) -f $(out) $(tmp) $(dep)
ifeq ($(vars)$(alldefs),)
ifn1of (no_symlink,$(mode))
	$(QUIET)$(LN_SYMLINK) $(src) $(out)
else
	$(QUIET)$(CP) $(src) $(out)
endif
else
ifneq ($(alldefs),)
	$(QUIET)$(APPEND_EXT) -n $(tmp) \
		$(foreach v, $(alldefs_vars), \
			$(foreach vl,$(firstword $(subst =, ,$(v))), \
				$(foreach vr,$(firstword $(word 2,$(subst =, ,$(v))) $($(v))), \
					"#define $(vl) $(vr)"))) ""
	$(QUIET)$(APPEND_EXT) -n $(tmp) \
		$(foreach v, $(alldefs_vars_q), \
			$(foreach vl,$(firstword $(subst =, ,$(v))), \
				$(foreach vr,\"$(firstword $(word 2,$(subst =, ,$(v))) $($(v)))\", \
					"#define $(vl) $(vr)"))) ""
	$(QUIET)$(CAT_EXT) $(alldefs_static) >> $(tmp)
endif
	$(QUIET)$(SED) -r $(foreach v, $(vars), \
		$(foreach vl, $(firstword $(subst =, ,$(v))), \
			-e "s:@$(vl)@:$(if $(findstring =,$(v)),$(foreach vr,$(lastword $(subst =, ,$(v))),$(if $(vr),$(subst :,\:,$(subst ",\",$(vr))))),$(if $($(vl)),$(subst :,\:,$(subst ",\",$($(vl)))))):")) \
		$(if $(alldefs),-e '/@ALLDEFINES@/{r $(tmp)' -e 'd}') \
		$(src) > $(out)
ifneq ($(alldefs),)
	$(QUIET)$(RM) -f $(tmp)
endif
endif

$(TARGET_OUT_DEP_CMDS)

endef # def_config-files_target_rule

#
# Common worker, included with $(evalval)
#
define def_unit_config-files_target_common

local defpath      := $($(target)_DEFPATH)
local outdir       := $($(target)_0_OUTDIR)

local src := $(firstword $(call TARGET_PROP_ALL,SOURCE))
local out := $(firstword $(call TARGET_PROP_ALL,TARGET))

ifeq ($(src),)
 $(error Variable $(target)_SOURCE must not be empty)
endif
ifeq ($(out),)
 $(error Variable $(target)_TARGET must not be empty)
endif

local src := $(abspathex $(src),$(defpath))
local out := $(abspathex $(out),$(outdir))
local dep := $(out).dep
local tmp := $(out).tmp

local mode := $($(target)_MODE)

local vars := $(call TARGET_PROP_ALL,VARS)

if1of (cdefs,$(mode))
$(eval $(def_config-files_target_cdefs_rule))
else # ifeq ($(mode),cdefs)

local alldefs_vars   := $(call TARGET_PROP_ALL,ALLDEFS_VARS)
local alldefs_vars_q := $(call TARGET_PROP_ALL,ALLDEFS_VARS_QUOTED)
local alldefs_static := $(call TARGET_PROP_ALL,ALLDEFS_STATIC)

local alldefs :=
ifneq ($(alldefs_vars)$(alldefs_vars_q)$(alldefs_static),)
 local alldefs := alldefs
endif

local alldefs_static := $(abspathex $(alldefs_static),$(defpath))

$(eval $(def_config-files_target_rule))

endif # ifeq ($(mode),cdefs)

$(target)_1_TARGET := $(out)

$(eval _OUT_FILES += $(out))
$(eval _DEPFILES += $(dep))

endef # def_unit_config-files_target_common

#
# Worker for target's CONFIG_FILES property.
#
define def_unit_config-files_target

$(target)_DEFPATH  := $($(parent_target)_DEFPATH)
$(target)_0_OUTDIR := $($(parent_target)_0_OUTDIR)

$(evalval def_unit_config-files_target_common)

$(eval $(parent_target)_ORDERDEPS += $(out))

endef # def_unit_config-files_target

#
# Unit hook for target's CONFIG_FILES property.
#
define def_unit_config-files_target_pre

ifeq ($($(target)_CONFIG_FILES),)
 $(error config-files unit reqires $(target)_CONFIG_FILES to be set)
endif

local parent_target := $(target)

$(foreach target,$($(target)_CONFIG_FILES),$(evalval def_unit_config-files_target))

endef # def_unit_config-files_target_pre

#
# Worker for global CONFIG_FILES targets.
#
define def_unit_config-files_global_target

local bld_trg      := $(KBUILD_TARGET)
local bld_trg_arch := $(KBUILD_TARGET_ARCH)
local bld_trg_cpu  := $(KBUILD_TARGET_CPU)
local bld_type     := $(KBUILD_TYPE)

$(evalval def_unit_config-files_target_common)

$(eval $(target): $(out))

$(eval OTHERS += $(target))

endef # def_unit_config-files_global_target

#
# Unit hook for global CONFIG_FILES targets.
#
$(foreach target,$(CONFIG_FILES),$(evalval def_unit_config-files_global_target))
