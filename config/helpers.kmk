## @file
# Helper definitions
#

ifndef HELPERS_INCLUDED
HELPERS_INCLUDED := 1

##
# Gathers all variants of the given global variable taking $(KBUILD_TARGET), $(KBUILD_TARGET_ARCH),
# $(KBUILD_TARGET_CPU) and $(KBUILD_TYPE) suffixes into account.
# @param 1  Global variable name (w/o underscore).
#
GLOBAL_VAR_ALL = $(strip \
    $($(1).$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH).$(KBUILD_TYPE)) \
    $($(1).$(KBUILD_TARGET).$(KBUILD_TARGET_ARCH)) \
    $($(1).$(KBUILD_TARGET).$(KBUILD_TYPE)) \
    $($(1).$(KBUILD_TARGET_CPU)) \
    $($(1).$(KBUILD_TARGET_ARCH)) \
    $($(1).$(KBUILD_TARGET)) \
    $($(1).$(KBUILD_TYPE)) \
    $($(1)) \
)

##
# Emits commands to generate a dep file containing the commands to produce the given output.
# Used as $(TARGET_OUT_DEP_CMDS) in the output generation rule.
# Expects the standard vars to be set ($(target), $(dep) and $(out)).
# Requires `includedep $(dep)` somewhere in the makefile in order to work.
#
ifndef NO_COMPILE_CMDS_DEPS
define TARGET_OUT_DEP_CMDS
	%$$(QUIET2)$$(APPEND) '$(dep)'
	%$$(QUIET2)$$(APPEND) '$(dep)' 'define $(target)_$(subst :,_,$(out))_CMDS_PREV_'
	%$$(QUIET2)$$(APPEND) -c '$(dep)' '$(out)'
	%$$(QUIET2)$$(APPEND) '$(dep)' 'endef'
endef # TARGET_OUT_DEP_CMDS
else
 TARGET_OUT_DEP_CMDS =
endif

##
# Emits FORCE if the commands to produce the given output differ from the previous value.
# Used as $(value TARGET_OUT_DEP_CHECK) in the output generation rule's rerequisite list.
# Expects the standard vars to be set ($(target), $(dep) and $(out)).
# Requires `includedep $(dep)` somewhere in the makefile in order to work.
#
ifndef NO_COMPILE_CMDS_DEPS
 TARGET_OUT_DEP_CHECK = $$(comp-cmds-ex $$($(target)_$(subst :,_,$(out))_CMDS_PREV_),$$(commands $(out)),FORCE)
else
 TARGET_OUT_DEP_CHECK =
endif

##
# Gathers all variants of the given target property taking $(bld_trg), $(bld_trg_arch),
# $(bld_cpu) and $(bld_type) suffixes into account. Requires $(target) to be set in
# additon to the suffix variables.
# @param 1  Target variable name (w/o underscore).
#
TARGET_PROP_ALL = $(strip \
    $($(target)_$(1).$(bld_trg).$(bld_trg_arch).$(bld_type)) \
    $($(target)_$(1).$(bld_trg).$(bld_trg_arch)) \
    $($(target)_$(1).$(bld_trg).$(bld_type)) \
    $($(target)_$(1).$(bld_trg_cpu)) \
    $($(target)_$(1).$(bld_trg_arch)) \
    $($(target)_$(1).$(bld_trg)) \
    $($(target)_$(1).$(bld_type)) \
    $($(target)_$(1)) \
)

TARGET_PROP_ALL_VAL = $(strip \
    $(value $(target)_$(1).$(bld_trg).$(bld_trg_arch).$(bld_type)) \
    $(value $(target)_$(1).$(bld_trg).$(bld_trg_arch)) \
    $(value $(target)_$(1).$(bld_trg).$(bld_type)) \
    $(value $(target)_$(1).$(bld_trg_cpu)) \
    $(value $(target)_$(1).$(bld_trg_arch)) \
    $(value $(target)_$(1).$(bld_trg)) \
    $(value $(target)_$(1).$(bld_type)) \
    $(value $(target)_$(1)) \
)

##
# Gets the name of the first defined variant of the given target property taking $(bld_trg), $(bld_trg_arch),
# $(bld_cpu) and $(bld_type) suffixes into account. Requires $(target) to be set in
# additon to the suffix variables. The returned name must be expanded to get the value.
# @param 1  Target variable name (w/o underscore).
#
TARGET_PROP_FIRST_VAR = $(firstdefined \
    $(target)_$(1).$(bld_trg).$(bld_trg_arch).$(bld_type) \
    $(target)_$(1).$(bld_trg).$(bld_trg_arch) \
    $(target)_$(1).$(bld_trg).$(bld_type) \
    $(target)_$(1).$(bld_trg_cpu) \
    $(target)_$(1).$(bld_trg_arch) \
    $(target)_$(1).$(bld_trg) \
    $(target)_$(1).$(bld_type) \
    $(target)_$(1) \
)

##
# Gets the value of the first defined variant of the given target property taking $(bld_trg), $(bld_trg_arch),
# $(bld_cpu) and $(bld_type) suffixes into account. Requires $(target) to be set in
# additon to the suffix variables. The returned name must be expanded to get the value.
# @param 1  Target variable name (w/o underscore).
# @param 2  Default valueif all variants are unefined.
#
TARGET_PROP_FIRST = $($(firstdefined \
    $(target)_$(1).$(bld_trg).$(bld_trg_arch).$(bld_type) \
    $(target)_$(1).$(bld_trg).$(bld_trg_arch) \
    $(target)_$(1).$(bld_trg).$(bld_type) \
    $(target)_$(1).$(bld_trg_cpu) \
    $(target)_$(1).$(bld_trg_arch) \
    $(target)_$(1).$(bld_trg) \
    $(target)_$(1).$(bld_type) \
    $(target)_$(1) \
    2 \
))

##
# Assigns a value of one variable to another variable only if the first one is defined.
# The resulting variable will be a deferred reference to the source to make sure it
# is not expanded before the references in the source get their values.
# @param 1  Source variable.
# @param 2  Target variable.
#
# Call it with $(eval $(call)).
#
define ASSIGN_IF_DEFIND
ifneq ($(origin $(1)),undefined)
$(2) = $$($(1))
endif
endef # ASSIGN_IF_DEFIND

##
# Copies one property of one stem to another including all variants (build, arch, etc).
# @param 1  Source stem (template, target, etc).
# @param 2  Property name (w/o underscore).
# @param 3  Target stem.
#
define COPY_PROP
$(foreach keyword, \
    $(KBUILD_TARGET).$(KBUILD_TARGET_ARCH).$(KBUILD_TYPE) \
    $(KBUILD_TARGET).$(KBUILD_TARGET_ARCH) \
    $(KBUILD_TARGET).$(KBUILD_TYPE) \
    $(KBUILD_TARGET_CPU) \
    $(KBUILD_TARGET_ARCH) \
    $(KBUILD_TARGET) \
    $(KBUILD_TYPE), \
    $(eval $(call ASSIGN_IF_DEFIND,$(1)_$(2).$(keyword),$(3)_$(2).$(keyword))))\
$(eval $(call ASSIGN_IF_DEFIND,$(1)_$(2),$(3)_$(2)))
endef # COPY_PROP

##
# Copies given properties of one stem to another including all variants (build, arch, etc).
# @param 1  Source stem (template, target, etc).
# @param 2  Target stem.
#
define COPY_PROPS
$(foreach prop,$(2),$(call COPY_PROP,$(1),$(prop),$(3)))
endef # COPY_PROPS

endif # ifndef HELPERS_INCLUDED
