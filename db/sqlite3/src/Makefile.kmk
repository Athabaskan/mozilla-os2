## @file
# Module makefile
#

SUB_DEPTH = ../../..
include $(KBUILD_PATH)/subheader.kmk

INSTALLS += sqlite3_exports

sqlite3_exports_INST = include/
sqlite3_exports_SOURCES = \
    sqlite3.h

DLLS += sqlite3

sqlite3_TEMPLATE = Dll
sqlite3_NAME     = mozsqlite3
sqlite3_NAME.os2 = mozsqlt3
sqlite3_DEFS     = SQLITE_API=__declspec\(dllexport\)
sqlite3_SOURCES  = sqlite3.c

# -DSQLITE_SECURE_DELETE=1 will cause SQLITE to 0-fill delete data so we
# don't have to vacuum to make sure the data is not visible in the file.
# -DSQLITE_ENABLE_FTS3=1 enables the full-text index module.
# -DSQLITE_CORE=1 statically links that module into the SQLite library.
# -DSQLITE_DEFAULT_PAGE_SIZE=32768 and SQLITE_MAX_DEFAULT_PAGE_SIZE=32768
# increases the page size from 1k, see bug 416330.  The value must stay in sync
# with mozIStorageConnection::DEFAULT_PAGE_SIZE.
# -DSQLITE_MAX_SCHEMA_RETRY increases the times SQLite may try to reparse
# statements when the schema changes. This is important when supporting lots of
# concurrent connections, especially when they use shared cache.
# Note: Be sure to update the configure.in checks when these change!
sqlite3_DEFS += \
    SQLITE_SECURE_DELETE=1 \
    SQLITE_THREADSAFE=1 \
    SQLITE_CORE=1 \
    SQLITE_ENABLE_FTS3=1 \
    SQLITE_ENABLE_UNLOCK_NOTIFY=1 \
    SQLITE_DEFAULT_PAGE_SIZE=32768 \
    SQLITE_MAX_DEFAULT_PAGE_SIZE=32768 \
    SQLITE_MAX_SCHEMA_RETRY=25

# -DSQLITE_ENABLE_LOCKING_STYLE=1 to help with AFP folders
ifeq ($(MOZ_WIDGET_TOOLKIT),cocoa)
sqlite3_DEFS += SQLITE_ENABLE_LOCKING_STYLE=1
endif

# Turn on SQLite's assertions in debug builds.
ifdef MOZ_DEBUG
sqlite3_DEFS += SQLITE_DEBUG=1
endif

sqlite3_DEFS.os2 += OS2_HIGH_MEMORY

include $(FILE_SUB_FOOTER)
